SQL - Queries

SELECT * FROM movies; --> untuk melihat isi tabel
* --> berarti untuk ALL COLOMNS

SELECT

Previously, we learned that SELECT is used every time you want to query data from a database and * means all columns.

Suppose we are only interested in two of the columns. We can select individual columns by their names (separated by a comma):

SELECT column1, column2 
FROM table_name;
To make it easier to read, we moved FROM to another line.

Line breaks don't mean anything specific in SQL. We could write this entire query in one line, and it would run just fine.

CONTOH
SELECT name, genre 
FROM movies;



AS

Knowing how SELECT works, suppose we have the code below:

SELECT name AS 'Titles'
FROM movies;

Can you guess what AS does?

AS is a keyword in SQL that allows you to rename a column or table using an alias. The new name can be anything you want as long as you put it inside of single quotes. Here we renamed the name column as Titles.

It is important to remember that the columns have not been renamed in the table. The aliases only appear in the result.




DISTINCT // sama seperti filter 

When we are examining data in a table, it can be helpful to know what distinct values exist in a particular column.

DISTINCT is used to return unique values in the output. It filters out all duplicate values in the specified column(s).

For instance,

SELECT tools 
FROM inventory;
might produce:

tools
Hammer
Nails
Nails
Nails

By adding DISTINCT before the column name, 

SELECT DISTINCT tools 
FROM inventory;

the result would now be:

tools
Hammer
Nails

Filtering the results of a query is an important skill in SQL. It is easier to see the different possible genres in the movie table after the data has been filtered than to scan every row in the table.



WHERE // mirip sortyBy

We can restrict our query results using the WHERE clause in order to obtain only the information we want.

Following this format, the statement below filters the result set to only include top rated movies (IMDb ratings greater than 8):

SELECT *
FROM movies
WHERE imdb_rating > 8;

How does it work?

WHERE clause filters the result set to only include rows where the following condition is true.

imdb_rating > 8 is the condition. Here, only rows with a value greater than 8 in the imdb_rating column will be returned.

The > is an operator. Operators create a condition that can be evaluated as either true or false.

Comparison operators used with the WHERE clause are:

= equal to
!= not equal to
> greater than
< less than
>= greater than or equal to
<= less than or equal to
There are also some special operators that we will learn more about in the upcoming exercises.



LIKE I

LIKE can be a useful operator when you want to compare similar values.

The movies table contains two films with similar titles, 'Se7en' and 'Seven'.

How could we select all movies that start with 'Se' and end with 'en' and have exactly one character in the middle?

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';

LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column.

name LIKE 'Se_en' is a condition evaluating the name column for a specific pattern.

Se_en represents a pattern with a wildcard character.

The _ means you can substitute any individual character here without breaking the pattern. The names Seven and Se7en both match this pattern.



Like II // yang termasuk kata hampir seperti REGEX

The percentage sign % is another wildcard character that can be used with LIKE.

This statement below filters the result set to only include movies with names that begin with the letter 'A':

SELECT * 
FROM movies
WHERE name LIKE 'A%';

% is a wildcard character that matches zero or more missing letters in the pattern. For example:

A% matches all movies with names that begin with letter 'A'
%a matches all movies that end with 'a'
We can also use % both before and after a pattern:

SELECT * 
FROM movies 
WHERE name LIKE '%man%';

Here, any movie that contains the word 'man' in its name will be returned in the result.

LIKE is not case sensitive. 'Batman' and 'Man of Steel' will both appear in the result of the query above.




Is Null // ada isi atau tidak 

By this point of the lesson, you might have noticed that there are a few missing values in the movies table. More often than not, the data you encounter will have missing values.

Unknown values are indicated by NULL.

It is not possible to test for NULL values with comparison operators, such as = and !=.

Instead, we will have to use these operators:

IS NULL
IS NOT NULL
To filter for all movies with an IMDb rating:

SELECT name
FROM movies 
WHERE imdb_rating IS NOT NULL;



Between //kalo string a-j (j tidak termasuk a-i), jika itu interger akan terbawa semua misal 1970 -1999 hasilnya akan sama

The BETWEEN operator can be used in a WHERE clause to filter the result set within a certain range. The values can be numbers, text or dates.

This statement filters the result set to only include movies with names that begin with letters 'A' up to, but not including 'J'.

SELECT *
FROM movies
WHERE name BETWEEN 'A' AND 'J';
Here is another one:

SELECT *
FROM movies
WHERE year BETWEEN 1990 AND 1999;
In this statement, the BETWEEN operator is being used to filter the result set to only include movies with years between 1990 up to, and including 1999.

Really interesting point to emphasize again:

BETWEEN two letters is not inclusive of the 2nd letter.
BETWEEN two numbers is inclusive of the 2nd number.




And //

Sometimes we want to combine multiple conditions in a WHERE clause to make the result set more specific and useful.

One way of doing this is to use the AND operator. Here, we use the AND operator to only return 90's romance movies.

SELECT * 
FROM movies
WHERE year BETWEEN 1990 AND 1999
   AND genre = 'romance';

year BETWEEN 1990 AND 1999 is the 1st condition.

genre = 'romance' is the 2nd condition.

AND combines the two conditions.

AND Venn Diagram

With AND, both conditions must be true for the row to be included in the result.

example

1.
In the previous exercise, we retrieved every movie released in the 1970's.

Now, let's retrieve every movie released in the 70's, that's also well received.

In the code editor, type:

SELECT *
FROM movies
WHERE year BETWEEN 1970 AND 1979
  AND imdb_rating > 8;

2.
Remove the previous query.

Suppose we have a picky friend who only wants to watch old horror films.

Using AND, write a new query that selects all movies made prior to 1985 that are also in the horror genre.

What are the two conditions?

year < 1985
genre = 'horror'
So your query should look like:

SELECT *
FROM movies
WHERE year < 1985
   AND genre = 'horror';

We indented and placed AND genre = 'horror' on another line just so it is easier to read.

Also, numeric values (1985) don't need to be wrapped with single quotes, whereas string values do ('horror').





Or//

Similar to AND, the OR operator can also be used to combine multiple conditions in WHERE, but there is a fundamental difference:

AND operator displays a row if all the conditions are true.
OR operator displays a row if any condition is true.
Suppose we want to check out a new movie or something action-packed:

SELECT *
FROM movies
WHERE year > 2014
   OR genre = 'action';

year > 2014 is the 1st condition.

genre = 'action' is the 2nd condition.

OR combines the two conditions.

OR Venn Diagram

With OR, if any of the conditions are true, then the row is added to the result.

example

1.
Let's test this out:

SELECT *
FROM movies
WHERE year > 2014
   OR genre = 'action';






Order B //


That's it with WHERE and its operators. Moving on!

It is often useful to list the data in our result set in a particular order.

We can sort the results using ORDER BY, either alphabetically or numerically. Sorting the results often makes the data more useful and easier to analyze.

For example, if we want to sort everything by the movie's title from A through Z:

SELECT *
FROM movies
ORDER BY name;
ORDER BY is a clause that indicates you want to sort the result set by a particular column.

name is the specified column.

Sometimes we want to sort things in a decreasing order. For example, if we want to select all of the well-received movies, sorted from highest to lowest by their year:

SELECT *
FROM movies
WHERE imdb_rating > 8
ORDER BY year DESC;
DESC is a keyword used in ORDER BY to sort the results in descending order (high to low or Z-A).

ASC is a keyword used in ORDER BY to sort the results in ascending order (low to high or A-Z).

The column that we ORDER BY doesn't even have to be one of the columns that we're displaying.

Note: ORDER BY always goes after WHERE (if WHERE is present).

example
1.
Suppose we want to retrieve the name and year columns of all the movies, ordered by their name alphabetically.

Type the following code:

SELECT name, year
FROM movies
ORDER BY name;


2.
Your turn! Remove the previous query.

Write a new query that retrieves the name, year, and imdb_rating columns of all the movies, ordered highest to lowest by their ratings.

What are the columns that are selected and the table we are interested in?

SELECT name, year, imdb_rating
FROM movies;
Next, let's sort them.

SELECT name, year, imdb_rating
FROM movies
ORDER BY imdb_rating DESC;
We added DESC here because we want to sort it in a descending order.

If you run this query, the result will start with movies with an IMDb rating of 9.0 all the way down to 4.2.



Limit //

We've been working with a fairly small table (fewer than 250 rows), but most SQL tables contain hundreds of thousands of records. In those situations, it becomes important to cap the number of rows in the result.

For instance, imagine that we just want to see a few examples of records.

SELECT *
FROM movies
LIMIT 10;

LIMIT is a clause that lets you specify the maximum number of rows the result set will have. This saves space on our screen and makes our queries run faster.

Here, we specify that the result set can't have more than 10 rows.

LIMIT always goes at the very end of the query. Also, it is not supported in all SQL databases.

example

1.
Combining your knowledge of LIMIT and ORDER BY, write a query that returns the top 3 highest rated movies.

Select all the columns.

First, what column(s) and table are we interested in?

SELECT *
FROM movies;

Next, sort them by rating (descending so we start from the highest).

SELECT *
FROM movies
ORDER BY imdb_rating DESC;

Lastly, add a LIMIT cap.

SELECT *
FROM movies
ORDER BY imdb_rating DESC
LIMIT 3;

If you run this query, the result will be 'The Dark Knight' at an impressive 9.0, 'Inception' and 'Star Wars: Episode V - The Empire Strikes Back' tying for second with a rating of 8.8.




Case //

A CASE statement allows us to create different outputs (usually in the SELECT statement). It is SQL's way of handling if-then logic.

Suppose we want to condense the ratings in movies to three levels:

If the rating is above 8, then it is Fantastic.
If the rating is above 6, then it is Poorly Received.
Else, Avoid at All Costs.
SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END
FROM movies;
Each WHEN tests a condition and the following THEN gives us the string if the condition is true.
The ELSE gives us the string if all the above conditions are false.
The CASE statement must end with END.
In the result, you have to scroll right because the column name is very long. To shorten it, we can rename the column to 'Review' using AS:

SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END AS 'Review'
FROM movies;

example

1.
Let's try one on your own.

Select the name column and use a CASE statement to create the second column that is:

'Chill' if genre = 'romance'
'Chill' if genre = 'comedy'
'Intense' in all other cases
Optional: Rename the whole CASE statement to 'Mood' using AS.

Give it your best shot! Check hint for the answer.

This is the final boss!

Your query should look like:

SELECT name,
 CASE
  WHEN genre = 'romance' THEN 'Chill'
  WHEN genre = 'comedy'  THEN 'Chill'
  ELSE 'Intense'
 END AS 'Mood'
FROM movies;

If the genre is romance, then it is Chill.
If the genre is comedy, then it is Chill.
Else, it is Intense.

Don't forget the comma after name.

Here is another query that will give us the same result:

SELECT name,
 CASE
  WHEN genre = 'romance' OR genre = 'comedy' 
   THEN 'Chill'
  ELSE 'Intense'
 END AS 'Mood'
FROM movies;

If the genre is romance or comedy, then it is Chill.
Else, it is Intense.



/// penting

Review
Congratulations!

We just learned how to query data from a database using SQL. We also learned how to filter queries to make the information more specific and useful.

Let's summarize: // PENTING  !!!!!!

SELECT 
is the clause we use every time we want to query information from a database.

AS 
renames a column or table.

DISTINCT 
return unique values.

WHERE 
is a popular command that lets you filter the results of the query based on conditions that you specify.

LIKE and BETWEEN 
are special operators.

AND and OR 
combines multiple conditions.

ORDER BY sorts the result.

LIMIT 
specifies the maximum number of rows that the query will return.

CASE creates different outputs.
